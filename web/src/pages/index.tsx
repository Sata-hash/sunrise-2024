/*import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>src/pages/index.tsx</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{" "}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
        </div>

        <div className={styles.grid}>
          <a
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Docs <span>-&gt;</span>
            </h2>
            <p>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </a>

          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Learn <span>-&gt;</span>
            </h2>
            <p>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Templates <span>-&gt;</span>
            </h2>
            <p>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Deploy <span>-&gt;</span>
            </h2>
            <p>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
        </div>
      </main>
    </>
  );
}*/
import React, { useState, useEffect } from 'react';
import Task from '../model/Task';
import { initialTasks } from '../utils/TaskList';

export default function Home() {
  const [tasks, setTasks] = useState<Task[]>([]);

  useEffect(() => {
    initializeTasks();
  }, []);

  const initializeTasks = () => {
    const initializedTasks = [...initialTasks];
    initializedTasks.forEach((task) => {
      task.completed = false;
    });
    initializedTasks[0].active = true;
    setTasks(initializedTasks);
  };

  const updateTasks = (updatedTasks: Task[]) => {
    setTasks([...updatedTasks]);
  };

  const activateNextTask = (tasks: Task[], completedTaskId: number) => {
    const completedTask = tasks.find(t => t.id === completedTaskId);
    if (completedTask) {
      const nextTaskInGroup = tasks.find(t => t.group === completedTask.group && !t.completed && !t.active);
      if (nextTaskInGroup) {
        nextTaskInGroup.active = true;
      } else {
        const nextGroup = completedTask.group + 1;
        const firstTaskOfNextGroup = tasks.find(t => t.group === nextGroup && !t.completed && !t.active);
        if (firstTaskOfNextGroup) {
          firstTaskOfNextGroup.active = true;
        }
      }
    }
  };

  const handleCompleteTask = (taskId: number) => {
    const activeTasksInOrder = tasks.filter(t => t.active && !t.completed);
    if (activeTasksInOrder.length === 0 || activeTasksInOrder[0].id !== taskId) {
      return;
    }
    const updatedTasks = tasks.map(task => {
      if (task.id === taskId) {
        task.completed = true;
        task.active = false;
      }
      return task;
    });

    updateTasks(updatedTasks);
    const inProgressTasks = tasks.filter(t => t.active && !t.completed);
    if (inProgressTasks.length === 0) {
      activateNextTask(updatedTasks, taskId);
    };
  }

  const handleStartTask = (taskId: number) => {
    const updatedTasks = tasks.map(task => {
      if (task.id === taskId) {
        task.active = true;
      }
      return task;
    });

    updateTasks(updatedTasks);
  };

  const renderTaskColumn = (title: string, tasks: Task[], renderActionButton: (task: Task, isFirst: boolean) => React.ReactNode) => (
    <div className="bg-white rounded-lg shadow-md p-4">
      <h2 className="text-xl font-bold mb-4">
        {title} <span className="text-sm text-gray-500">({tasks.length})</span>
      </h2>
      {tasks.map((task, index) => (
        <div key={task.id} className="bg-slate-100 border-slate-800 shadow-lg rounded-lg p-4 mb-4">
          <h3 className="text-lg font-semibold mb-2">{task.title}</h3>
          <p className="text-gray-600 mb-4">{task.description}</p>
          {renderActionButton(task, index === 0)}
        </div>
      ))}
    </div>
  );

  return (
    <div className="min-h-screen bg-slate-200">
      <header className="bg-blue-950 text-white py-4 shadow-lg">
        <h1 className="text-3xl font-bold text-center">Task Board</h1>
      </header>
      <main className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {renderTaskColumn('To-Do', tasks.filter(t => !t.active && !t.completed), (task, isFirst) => (
            <button 
              onClick={() => handleStartTask(task.id)}
               disabled={!isFirst}
              className={`font-bold py-2 px-4 rounded ${
                isFirst 
                  ? 'bg-blue-500 hover:bg-blue-600 text-white' 
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              Start
            </button>
          ))}
          {renderTaskColumn('In Progress', tasks.filter(t => t.active && !t.completed), (task, isFirst) => (
            <button 
              onClick={() => handleCompleteTask(task.id)} 
              disabled={!isFirst}
              className={`font-bold py-2 px-4 rounded ${
                isFirst 
                  ? 'bg-green-500 hover:bg-green-600 text-white' 
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              Done
            </button>
          ))}
          {renderTaskColumn('Completed', tasks.filter(t => t.completed), () => null)}
        </div>
      </main>
    </div>
  );
}